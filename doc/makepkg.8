." the string declarations are a start to try and make distro independent
.ds DS Arch Linux
.ds PB PKGBUILD
.ds VR 3.0.0
.TH makepkg 8 "Feb 07, 2007" "makepkg version \*(VR" "\*(DS Utilities"
.SH NAME
makepkg \- package build utility

.SH SYNOPSIS
.B makepkg
[\fIoptions\fR]

.SH DESCRIPTION
\fBmakepkg\fP is a script to automate the building of packages. All it needs is
a build-capable Linux platform and a custom build script for each package you
wish to build (known as a \fB\*(PB\fP). The advantage to a script-based build
is that the work is only done once. Once you have the build script for a
package, makepkg will do the rest: download and validate source files, check
dependencies, configure the build-time settings, build the package, install the
package into a temporary root, make customizations, generate meta-info, and
package the whole thing up for \fBpacman\fP to use.

\fBmakeworld\fP can be used to rebuild an entire package group or the entire
build tree. See \fBmakeworld --help\fP for syntax.

.SH OPTIONS
.TP
.B \-b, --builddeps
Build missing dependencies from source. When \fBmakepkg\fP finds missing
build-time or run-time dependencies, it will look for the dependencies'
\fB\*(PB\fP files under \fIABSROOT\fP (set in \fBmakepkg.conf\fP). If it finds
them it will call \fBmakepkg\fP to build and install the missing dependencies.
The child calls will be made with the \fB-b\fP and \fB-i\fP options.
.TP
.B \-B, --noccache
Disable the use of \fBccache\fP during build (useful for select packages that
have problems with \fBccache\fP).
.TP
.B \-c, --clean
Clean up leftover work files and directories after a successful build.
.TP
.B \-C, --cleancache
Removes all cached source files from the directory specified in \fISRCDEST\fP
in \fBmakepkg.conf\fP.
.TP
.B \-d, --nodeps
Do not perform any dependency checks. This will let you override and ignore any
dependencies required. There is a good chance this option will break the build
process if all of the dependencies are not installed.
.TP
.B \-e, --noextract
Do not extract source files; use whatever source already exists in the src/
directory. This is handy if you want to go into src and manually patch or tweak
code, then make a package out of the result. Keep in mind that creating a patch
may be a better solution to allow others to use your \fB\*(PB\fP.
.TP
.B \-f, --force
\fBmakepkg\fP will not build a package if a built package already exists in the
\fIPKGDEST\fP (set in \fBmakepkg.conf\fP) directory, which may default to the
current directory. This allows the built package to be overwritten.
.TP
.B \-g, --geninteg
For each source file in the source array of \fB\*(PB\fP, download the file if
required and generate integrity checks. The integrity checks generated are
determined by the value of the \fIINTEGRITY_CHECK\fP array in makepkg.conf.
This output can be redirected into your \fB\*(PB\fP for source validation
(makepkg -g >> \*(PB).
.TP
.B \-h, --help
Output syntax and command line options.
.TP
.B \-i, --install
Install or upgrade the package after a successful build using \fBpacman\fP.
.TP
.B \-j \fIjobs\fP
Sets MAKEFLAGS="-j\fIjobs\fP" before building the package. This is useful for
overriding the \fIMAKEFLAGS\fP setting in \fBmakepkg.conf\fP.
.TP
.B \-m, --nocolor
Disable color in output messages.
.TP
.B \-o, --nobuild
Download and extract files only, but do not build them. Useful with the
\fB--noextract\fP option if you wish to tweak the files in src/ before
building.
.TP
.B \-p \fIbuildscript\fP
Read the package script \fIbuildscript\fP instead of the default, \fI\*(PB\fP.
.TP
.B \-r, --rmdeps
Upon successful build, remove any dependencies installed by \fBmakepkg\fP
during dependency auto-resolution (using \fB-b\fP or \fB-s\fP).
.TP
.B \-R, --repackage
Repackage contents of pkg/ without rebuilding the package. This is useful if
you forgot a depend or install file in your \fB\*(PB\fP and the build itself
will not change.
.TP
.B \-s, --syncdeps
Install missing dependencies using \fBpacman\fP. When missing build-time or
run-time dependencies are found, \fBpacman\fP will try to resolve them. If
successful, the missing packages will be downloaded and installed.
.TP
.B \-S, --usesudo
Use \fBsudo\fP to perform all operations that require \fBpacman\fP. This is
useful for \fB--install\fP, \fB--rmdeps\fP, and \fB--syncdeps\fP. If you are
building packages as a non-root user as recommended, this option should be used
if using any option that calls \fBpacman\fP.
.TP
.B \--noconfirm
(Passed to \fBpacman\fP) Prevent \fBpacman\fP from waiting for user input
before proceeding with operations.
.TP
.B \--noprogressbar
(Passed to \fBpacman\fP) Prevent \fBpacman\fP from displaying a progress bar;
useful if you are redirecting makepkg output to file.

.SH CONFIGURATION
See
.BR makepkg.conf (5)
for more details on configuring \fBmakepkg\fP using the \fBmakepkg.conf\fP file.

.SH BUGS
Bugs? You must be kidding, there are no bugs in this software. But if we happen
to be wrong, send us an email with as much detail as possible to
<pacman-dev@archlinux.org>.

.SH SEE ALSO
.BR makepkg.conf (5),
.BR \*(PB (5),
.BR pacman (8)

See the Arch Linux website at <http://www.archlinux.org> for more current
information on the distribution and the \fBpacman\fP family of tools, and
<http://wiki.archlinux.org/index.php/Arch_Packaging_Standards> for
recommendations on packaging standards.

.SH AUTHORS
.nf
Judd Vinet <jvinet@zeroflux.org>
Aurelien Foret <aurelien@archlinux.org>
Aaron Griffin <aaron@archlinux.org>
Dan McGee <dan@archlinux.org>
.fi

See the 'AUTHORS' file for additional contributors.
