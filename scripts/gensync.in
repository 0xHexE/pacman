#!/bin/bash
#
#   gensync
#   @configure_input@
#
#   Copyright (c) 2002-2007 by Judd Vinet <jvinet@zeroflux.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

# gettext initialization
export TEXTDOMAIN='pacman'
export TEXTDOMAINDIR='@localedir@'

myver='@PACKAGE_VERSION@'

# functions

usage() {
	printf "gensync (pacman) %s\n" "$myver"
	echo
	printf "$(gettext "Usage: %s <root> <destfile> [package_directory]")\n" "$0"
	echo
	echo "$(gettext "gensync will generate a sync database by reading all PKGBUILD files")"
	echo "$(gettext "from <root>. gensync builds the database in a temporary directory")"
	echo "$(gettext "and then compresses it to <destfile>.")"
	echo
	echo "$(gettext "gensync will calculate md5sums of packages in the same directory as")"
	echo "$(gettext "<destfile>, unless an alternate [package_directory] is specified.")"
	echo
	echo "$(gettext "note: The <destfile> name is important. It must be of the form")"
	echo "$(gettext "      {treename}.db.tar.gz where {treename} is the name of the custom")"
	echo "$(gettext "      package repository you configured in /etc/pacman.conf. The")"
	echo "$(gettext "      generated database must reside in the same directory as your")"
	echo "$(gettext "      custom packages (also configured in /etc/pacman.conf)")"
	echo
	echo "$(gettext "example:  gensync /var/abs/local /home/mypkgs/custom.db.tar.gz")"
	echo
	exit 0
}

version() {
	printf "gensync (pacman) %s\n" "$myver"
	printf "Copyright (C) 2002-2007 Judd Vinet <jvinet@zeroflux.org>.\n"
	echo
	printf "This is free software; see the source for copying conditions.\n"
	printf "There is NO WARRANTY, to the extent permitted by law.\n"
	echo
}

error () {
	local mesg=$1; shift
	printf "==> ERROR: ${mesg}\n" "$@" >&2
}

die () {
	error $*
	exit 1
}

check_force () {
	local i
	for i in ${options[@]}; do
		local lc=$(echo $i | tr [:upper:] [:lower:])
		if [ "$lc" = "force" ]; then
			true
		fi
	done
	false
}

# PROGRAM START

if [ "$1" = "-h" -o "$1" = "--help" ]; then
	usage
	exit 0
fi

if [ "$1" = "-V" -o "$1" = "--version" ]; then
	version
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
	exit 1
fi

# source system and user makepkg.conf
if [ -r @sysconfdir@/makepkg.conf ]; then
	source @sysconfdir@/makepkg.conf
else
	die "$(gettext "%s not found. Can not continue.")" "@sysconfdir@/makepkg.conf"
fi

if [ -r ~/.makepkg.conf ]; then
	source ~/.makepkg.conf
fi


d=$(dirname $1)
rootdir="$(cd $d && pwd)/$(basename $1)"
d="$(dirname $2)"
destdir="$(cd $d && pwd)"
destfile="$destdir/$(basename $2)"
pkgdir=""
if [ "$3" != "" ]; then
	pkgdir="$3"
fi

[ ! -d "$rootdir" ] && die "$(gettext "invalid root dir: %s")" $rootdir

echo "$(gettext "gensync: building database entries, generating md5sums...")" >&2
cd "$destdir"

pkgs=""
forcepkgs=""

for file in $(find "$rootdir"/* -name "$BUILDSCRIPT"); do
	unset pkgname pkgver pkgrel options

	source $file || die "$(gettext "failed to parse parse %s")" $file
	if [ "$pkgdir" != "" ]; then
		pkgfile="$pkgdir/$pkgname-$pkgver-$pkgrel-$CARCH.$PKGEXT"
	else
		pkgfile="$destdir/$pkgname-$pkgver-$pkgrel-$CARCH.$PKGEXT"
	fi

	if [ ! -f "$pkgfile" ]; then
		error "$(gettext "could not find %s-%s-%s-%s.%s - skipping")" $pkgname $pkgver $pkgrel $CARCH $PKGEXT
	else
		if check_force; then
			forcepkgs="$forcepkgs $pkgfile"
		else
			pkgs="$pkgs $pkgfile"
		fi
	fi
done

echo "$(gettext "creating repo DB...")"

# we'll trim the output just a tad, as gensync may be used on large repos
repo-add $destfile $pkgs --force $force_pkgs \
		| grep -e "package" -e "database"

# vim: set ts=2 sw=2 noet:
