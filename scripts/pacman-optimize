#!/bin/bash
# 
#   pacman-optimize
#  
#   Copyright (c) 2002-2006 by Judd Vinet <jvinet@zeroflux.org>
#  
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
# 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#   USA.
#

myver='3.0.0'

error() {
	echo -e "\033[1;31m:: ERROR:\033[1;0m\033[1;1m$@\033[1;0m" >&2
}

source /etc/rc.d/functions

usage() {
	echo "pacman-optimize $myver"
	echo "usage: $0 [pacman_db_root]"
	echo 
	echo "pacman-optimize is a little hack that should improve the performance"
	echo "of pacman when reading/writing to its filesystem-based database."
	echo
	echo "Because pacman uses many small files to keep track of packages,"
	echo "there is a tendency for these files to become fragmented over time."
	echo "This script attempts to relocate these small files into one"
	echo "continuous location on your hard drive.  The result is that the hard"
	echo "drive should be able to read them faster, since the hard drive head"
	echo "does not have to move around the disk as much."
	echo
}

die() {
	error $@
	exit 1
}

die_r() {
	rm -f /tmp/pacman.lck
	die $@
}

dbroot="/var/lib/pacman"

if [ "$1" != "" ]; then
	if [ "$1" = "-h" -o "$1" = "--help" ]; then
		usage
		exit 0
	fi
	dbroot="$1"
fi

# make sure pacman isn't running
if [ -f /tmp/pacman.lck ]; then
	die "Pacman lockfile was found.  Cannot run while pacman is running."
fi

if [ ! -d "$dbroot" ]; then
	die "$dbroot does not exist or is not a directory"
fi

if [ ! -w "$dbroot" ]; then
	die "You must have correct permissions to optimize the database"
fi

# do not let pacman run while we do this
touch /tmp/pacman.lck

# step 1: sum the old db
stat_busy "Md5sum'ing the old database"
find $dbroot -type f | sort | xargs md5sum > /tmp/pacsums.old
stat_done

# step 2: tar it up
stat_busy "Tar'ing up $dbroot"
cd $dbroot
tar -czf /tmp/pacmanDB.tgz ./ || \
		stat_fail && die_r "tar'ing up $dbroot failed"
stat_done

# step 3: make and sum the new db
stat_busy "Making and md5sum'ing the new db"
mkdir $dbroot.new
tar -zxpf /tmp/pacmanDB.tgz -C $dbroot.new/ || \
		stat_fail && die_r "untar'ing $dbroot failed"
find $dbroot.new -type -f | sort | xargs md5sum > /tmp/pacsums.new
stat_done

# step 4: compare the sums
stat_busy "Checking integrity"
diff /tmp/pacsums.old /tmp/pacsums.new >/dev/null 2>&1
if [ $? -ne 0 ]; then
	# failed
	stat_fail
	# leave /tmp/pacsums.old and .new for checking to see what doesn't match up
	rm -rf "$dbroot.new" /tmp/pacman.lck /tmp/pacmanDB.tgz
	die_r "integrity check FAILED, reverting to old database"
fi

# step 5: remove the new temporary database and the old one
#         and use the .tgz to replace the old one
stat_busy "Putting the new database in place"
rm -rf "$dbroot.new" "$dbroot"/*
tar -zxpf /tmp/pacmanDB.tgz -C "$dbroot"/
stat_done

# remove the lock file, sum files, and .tgz of database
rm -f /tmp/pacman.lck /tmp/pacmsums.old /tmp/pacmsums.new /tmp/pacmanDB.tgz

echo
echo "Finished.  Your pacman database has been optimized."
echo

exit 0

# vim: set ts=2 sw=2 noet:
