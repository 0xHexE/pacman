#!/bin/bash
#
#   repo-add - add a package to a given repo database file
#   @configure_input@
#
#   Copyright (c) 2006 Aaron Griffin <aaron@archlinux.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.

# gettext initialization
export TEXTDOMAIN='pacman'
export TEXTDOMAINDIR='@localedir@'

myver='@PACKAGE_VERSION@'

FORCE=0
REPO_DB_FILE=""

# print usage instructions
usage() {
	printf "repo-add (pacman) %s\n\n" "$myver"
	printf "$(gettext "Usage: %s <path-to-db> [--force] <package> ...\n\n")" "$0"
	printf "$(gettext "\
repo-add will update a package database by reading a package file.\n\
Multiple packages to add can be specified on the command line.\n\n")"
	printf "$(gettext "\
The --force flag will add a 'force' entry to the sync database, which\n\
tells pacman to skip its internal version number checking and update\n\
the package regardless.\n\n")"
	echo "$(gettext "Example:  repo-add /path/to/repo.db.tar.gz pacman-3.0.0.pkg.tar.gz")"
}

version() {
	printf "repo-add (pacman) %s\n" "$myver"
	printf "$(gettext "\
Copyright (C) 2006 Aaron Griffin <aaron@archlinux.org>.\n\n\
This is free software; see the source for copying conditions.\n\
There is NO WARRANTY, to the extent permitted by law.\n")"
}

# return calculated checksum of package
#   arg1 - checksum type
#   arg2 - path to package
get_checksum () {
	case "$(echo "$1" | tr A-Z a-z)" in
		md5) sum=$(md5sum $2); echo ${sum% *} ;;
		sha1) sum=$(sha1sum $2); echo ${sum% *} ;;
		sha256) sum=$(sha256sum $2); echo ${sum% *} ;;
		sha384) sum=$(sha256sum $2); echo ${sum% *} ;;
		sha512) sum=$(sha256sum $2); echo ${sum% *} ;;
	esac
}

# return PKGINFO string for checksum type
#   arg1 - checksum type
checksum_name () {
	case "$(echo "$1" | tr A-Z a-z)" in
		md5) echo "MD5SUM" ;;
		sha1) echo "SHA1SUM" ;;
		sha256) echo "SHA256SUM" ;;
		sha384) echo "SHA384SUM" ;;
		sha512) echo "SHA512SUM" ;;
	esac
}

# test if a file is a repository DB
test_repo_db_file () {
	if [ -f "$REPO_DB_FILE" ]; then
		[ "$(bsdtar -tf "$REPO_DB_FILE" | grep -c "/desc")" -gt 0 ] || return 1
	else
		true
	fi
}

# write an entry to the pacman database
#   arg1 - path to package
db_write_entry()
{
	# blank out all variables and set pkgfile
	pkgfile=$(readlink -f $1)
	export pkgname=""
	pkgver=""
	pkgdesc=""
	url=""
	builddate=""
	packager=""
	csize=""
	size=""
	_groups=""
	_depends=""
	_backups=""
	_licenses=""
	_replaces=""
	_provides=""
	_conflicts=""

	OLDIFS="$IFS"
	# IFS (field seperator) is only the newline character
	IFS="
"

	# read info from the zipped package
	for i in $(bsdtar -xOf "$pkgfile" .PKGINFO | grep -v "^#" |sed 's|\(\w*\)\s*=\s*\(.*\)|\1="\2"|'); do
		eval "${i}"
		case "$i" in
			group=*) _groups="$_groups $group" ;;
			depend=*) _depends="$_depends $depend" ;;
			backup=*) _backups="$_backups $backup" ;;
			license=*) _licenses="$_licenses $license" ;;
			replaces=*) _replaces="$_replaces $replaces" ;;
			provides=*) _provides="$_provides $provides" ;;
			conflict=*) _conflicts="$_conflicts $conflict" ;;
		esac
	done

	IFS=$OLDIFS

	# get compressed size of package
	csize="$(du -b -L $pkgfile | cut -f1)"

	cd $gstmpdir

	# ensure $pkgname and $pkgver variables were found
	if [ -z "$pkgname" -o -z "$pkgver" ]; then
		printf "$(gettext "   error: invalid package file")\n"
		return 1
	fi

	# remove any other package in the DB with same name
	for existing in *; do
		if [ "${existing%-*-*}" = "$pkgname" ]; then
			printf "$(gettext ":: removing existing package '%s'")\n" "$existing"
			rm -rf $existing
		fi
	done

	# create package directory
	mkdir "$pkgname-$pkgver"
	cd "$pkgname-$pkgver"

	# create desc entry
	printf "$(gettext ":: creating 'desc' db entry")\n"
	echo -e "%FILENAME%\n$(basename $1)\n" >>desc
	echo -e "%NAME%\n$pkgname\n" >>desc
	echo -e "%VERSION%\n$pkgver\n" >>desc
	if [ -n "$pkgdesc" ]; then
		echo -e "%DESC%\n$pkgdesc\n" >>desc
	fi
	if [ -n "$_groups" ]; then
		echo "%GROUPS%" >>desc
		echo $_groups | tr -s ' ' '\n' >>desc
		echo "" >>desc
	fi
	[ -n $csize ] && echo -e "%CSIZE%\n$csize\n" >>desc
	[ -n $size ] && echo -e "%ISIZE%\n$size\n" >>desc

	# compute checksums
	for chk in ${DB_CHECKSUMS[@]}; do
		name="$(checksum_name $chk)"
		printf "$(gettext ":: computing %s checksums")\n" "$name"
		if [ -n "$name" ]; then
			echo -e "%$name%\n$(get_checksum $chk $pkgfile)\n" >>desc
		fi
	done

	[ -n "$url" ] && echo -e "%URL%\n$url\n" >>desc
	if [ -n "$_licenses" ]; then
		echo "%LICENSE%" >>desc
		echo $_licenses | tr -s ' ' '\n' >>desc
		echo "" >>desc
	fi
	[ -n "$arch" ] && echo -e "%ARCH%\n$arch\n" >>desc
	[ -n "$builddate" ] && echo -e "%BUILDDATE%\n$builddate\n" >>desc
	[ -n "$packager" ] && echo -e "%PACKAGER%\n$packager\n" >>desc

	if [ -n "$_replaces" ]; then
		echo "%REPLACES%" >>desc
		echo $_replaces | tr -s ' ' '\n' >>desc
		echo "" >>desc
	fi
	[ "$FORCE" = "1" ] && echo -e "%FORCE%\n" >>desc

	# create depends entry
	echo ":: creating 'depends' db entry"
	if [ -n "$_depends" ]; then
		echo "%DEPENDS%" >>depends
		echo $_depends | tr -s ' ' '\n' >>depends
		echo "" >>depends
	fi
	if [ -n "$_conflicts" ]; then
		echo "%CONFLICTS%" >>depends
		echo $_conflicts | tr -s ' ' '\n' >>depends
		echo "" >>depends
	fi
	if [ -n "$_provides" ]; then
		echo "%PROVIDES%" >>depends
		echo $_provides | tr -s ' ' '\n' >>depends
		echo "" >>depends
	fi

	# preserve the modification time
	touch -r "$pkgfile" desc depends
} # end db_write_entry

# PROGRAM START

# check for help flags
if [ "$1" = "-h" -o "$1" = "--help" ]; then
	usage
	exit 0
fi

# check for version flags
if [ "$1" = "-V" -o "$1" = "--version" ]; then
	version
	exit 0
fi

# check for correct number of args
if [ $# -lt 2 ]; then
	usage
	exit 1
fi

# source system and user makepkg.conf
if [ -r @sysconfdir@/makepkg.conf ]; then
	source @sysconfdir@/makepkg.conf
else
	printf "$(gettext "ERROR: /etc/makepkg.conf not found. Can not continue.")\n" >&2
	exit 1 # $E_CONFIG_ERROR
fi

if [ -r ~/.makepkg.conf ]; then
	source ~/.makepkg.conf
fi

# main routine
if [ $# -gt 1 ]; then
	gstmpdir=$(mktemp -d /tmp/gensync.XXXXXXXXXX) || (\
	printf "$(gettext "cannot create temp directory for database building")\n"; \
	exit 1)

	success=0
	# parse arguements
	for arg in $@; do
		if [ "$arg" == "--force" -o "$arg" == "-f" ]; then
			FORCE=1
		elif [ -z "$REPO_DB_FILE" ]; then
			REPO_DB_FILE="$(readlink -f $arg)"
			if ! test_repo_db_file; then
				printf "$(gettext "error: repository file '%s' is not a proper pacman db")\n" "$REPO_DB_FILE"
				exit 1
			elif [ -f "$REPO_DB_FILE" ]; then
				printf "$(gettext ":: extracting database to a temporary location")\n"
				bsdtar -xf "$REPO_DB_FILE" -C "$gstmpdir"
			fi
		else
			if [ -f "$arg" ]; then
				if ! bsdtar -tf "$arg" .PKGINFO 2>&1 >/dev/null; then
					printf "$(gettext "error: '%s' is not a package file, skipping")\n" "$arg"
				else
					printf "$(gettext ":: adding package '%s'")\n" "$arg"

					this_dir="$(pwd)"
					if db_write_entry "$arg"; then
						success=1
					fi
					cd $this_dir
				fi
			else
				printf "$(gettext "error: package '%s' not found")\n" "$arg"
			fi
		fi
	done

	# if all operations were a success, rezip database
	if [ "$success" = "1" ]; then
		printf "$(gettext ":: creating updated database file %s")\n" "$REPO_DB_FILE"
		cd $gstmpdir
		if [ -n "$(ls)" ]; then
			[ -f "${REPO_DB_FILE}.old" ] && rm "${REPO_DB_FILE}.old"
			[ -f "$REPO_DB_FILE" ] && mv "$REPO_DB_FILE" "${REPO_DB_FILE}.old"
			case "$DB_COMPRESSION" in
				gz) bsdtar -c * | gzip -9 >$REPO_DB_FILE ;;
				bz2) bsdtar -c * | bzip2 -9 >$REPO_DB_FILE ;;
				*) printf "$(gettext "warning: no compression set")\n"
				bsdtar -c * >$REPO_DB_FILE;;
			esac
		fi
	else
		printf "$(gettext ":: no packages modified, nothing to do")\n"
	fi
fi

# remove the temp directory used to unzip
[ -d "$gstmpdir" ] && rm -rf $gstmpdir

# vim: set ts=2 sw=2 noet:
